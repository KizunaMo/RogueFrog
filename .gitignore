# ================================================================================
# Unity .gitignore - Complete Annotated Version
# ================================================================================
# This file tells Git which files and directories to ignore in Unity projects.
# Organized by category with detailed explanations for maintainability.
#
# Pattern Explanation:
# [Aa] = Matches both uppercase A and lowercase a (cross-platform compatibility)
# /**/ = Matches any subdirectory at any depth
# *.ext = Matches all files with specific extension
# /path/ = Matches directory from project root
# 
# ================================================================================

# ================================================================================
# Unity Core Generated Files (CRITICAL - Must Always Ignore)
# ================================================================================
# These are automatically generated by Unity and should NEVER be in version control

/[Ll]ibrary/
# Contains Unity's cache, imported assets, and build data
# Rebuilds automatically when project opens
# Can be several GB in size

/[Tt]emp/
# Temporary files during compilation and builds
# Contains intermediate build artifacts
# Automatically cleaned by Unity

/[Oo]bj/
# Compiled object files and intermediate build data
# Platform-specific compilation outputs
# Regenerated on each build

/[Bb]uild/
/[Bb]uilds/
# Final build outputs for different platforms
# Contains packaged applications (.exe, .apk, etc.)
# Should be distributed separately, not in source control

/[Ll]ogs/
# Unity console logs and crash reports
# Useful for debugging but not for version control
# Can contain sensitive runtime information

/[Uu]ser[Ss]ettings/
# Personal Unity editor settings and preferences
# Different for each developer's setup
# Includes window layouts, editor preferences

# ================================================================================
# Memory and Performance Data (Privacy and Size Concerns)
# ================================================================================

/[Mm]emoryCaptures/
# Unity Memory Profiler snapshots
# Can contain sensitive data about game state
# Files can be extremely large (100MB+)

/[Rr]ecordings/
# Unity Recorder output files
# Video/audio recordings from development
# Often large media files not suitable for Git

# ================================================================================
# XLua Integration (Generated vs Source Code)
# ================================================================================
# Strategy: Track source Lua scripts and configs, ignore generated C# bindings

# XLua Auto-Generated Files (IGNORE these)
/[Aa]ssets/**/Gen/
/[Aa]ssets/XLua/Gen/
# XLua generates C# bridge code automatically
# These files are recreated every time XLua processes your Lua configs
# Should be regenerated locally by each developer

**/XLuaGenAutoRegister.cs
**/DelegatesGensBridge.cs
**/LinkXmlGen.cs
# Specific XLua generated files that might appear outside Gen folders
# These are created based on your XLua configuration

# XLua Source Files (KEEP these - add comments if needed)
# The following file types should be tracked:
# - *.lua (Lua source scripts)
# - *.lua.txt (Lua scripts as TextAssets in Unity)
# - XLuaConfig.cs (your custom XLua configuration)
# - Custom XLua wrapper scripts you write manually

# ================================================================================
# Shader Development (Cache vs Source)
# ================================================================================
# Strategy: Track all shader source code, ignore Unity's compiled cache

# Shader Cache and Variants (IGNORE these)
/[Ll]ibrary/ShaderCache/
# Unity's compiled shader cache
# Platform-specific optimized versions
# Rebuilds automatically based on source shaders

/[Aa]ssets/StreamingAssets/**/ShaderVariants/
*.shadervariants
# Compiled shader variant collections
# Generated during build process
# Can be very large files

# Shader Source Files (KEEP these - they are your work!)
# The following should always be tracked:
# - *.shader (Unity ShaderLab files)
# - *.hlsl (High Level Shading Language)
# - *.cginc (CG include files)
# - *.compute (Compute shaders)
# - Custom shader property files and configurations

# ================================================================================
# IDE and Editor Configuration Files
# ================================================================================
# Each developer may use different IDEs with different settings

# Visual Studio
.vs/
# Visual Studio cache and user settings
# Contains personal debugging configurations and temporary files

*.csproj
*.unityproj
*.sln
# Project files auto-generated by Unity
# Different for each platform and Unity version
# Should be regenerated locally

*.suo
*.tmp
*.user
*.userprefs
# Visual Studio user-specific settings
# Personal preferences and temporary files

*.pidb
*.booproj
*.svd
*.pdb
*.mdb
*.opendb
*.VC.db
# Various Visual Studio database and debug files
# Platform and configuration specific

# Visual Studio Code
.vscode/
# VSCode workspace settings and extensions
# Comment out the line below if your team shares debug configurations:
# !.vscode/launch.json

# JetBrains Rider
.idea/
*.iml
# Rider IDE configuration and cache files
# Personal workspace settings

/[Aa]ssets/Plugins/Editor/JetBrains*
# Auto-generated Rider Unity plugin files

# ================================================================================
# Build Output and Distribution Files
# ================================================================================
# Final packaged applications and build artifacts

# Platform Build Outputs
*.apk
*.aab
# Android application packages

*.ipa
*.app
# iOS application packages

*.exe
# Windows executables

*.unitypackage
*.unitypackage.meta
# Unity package files - usually for distribution

# Build Configuration Assets
/[Aa]ssets/Resources/Build.asset
/[Aa]ssets/Resources/Build.asset.meta
/[Aa]ssets/Resources/BuildVersion.asset
/[Aa]ssets/Resources/BuildVersion.asset.meta
# Auto-generated build information assets
# Usually created by custom build scripts

# ================================================================================
# Platform-Specific Plugin Files
# ================================================================================
# Native plugins that get compiled for specific platforms

# Android Native Libraries
/[Aa]ssets/Plugins/Android/libs/
*.so
# Compiled Android native libraries
# Should be built from source or downloaded from package managers

# iOS Native Libraries  
/[Aa]ssets/Plugins/iOS/
# iOS-specific compiled libraries and frameworks

# ================================================================================
# Addressables System (Build Outputs Only)
# ================================================================================
# Strategy: Track settings and groups, ignore built content

# Addressables Build Outputs (IGNORE these)
/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bin
# Binary content state files
# Contains metadata about built addressable content
# Regenerated with each addressable build

/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/*.bundle
# Compiled addressable asset bundles
# Can be very large (MB to GB)
# Should be built locally or on build servers

/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/catalog_*.json
/[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*/settings.json
# Runtime catalog and settings files
# Generated during addressable content build

# Addressables Settings (KEEP these - essential for team)
# These files should be tracked:
# - AddressableAssetSettings.asset (main configuration)
# - AssetGroups/*.asset (group definitions)
# - DataBuilders/*.asset (build script configurations)

# Android Addressables Build Data
/[Aa]ssets/[Ss]treamingAssets/aa.meta
/[Aa]ssets/[Ss]treamingAssets/aa/*
# Platform-specific addressable build outputs in StreamingAssets

# ================================================================================
# Unity System and Cache Files
# ================================================================================

# Unity Meta File Cache
*.pidb.meta
*.pdb.meta
*.mdb.meta
# Meta files for debug databases
# Auto-generated and not needed in version control

# Unity Crash Reports
sysinfo.txt
# System information captured during crashes
# Contains personal system details

# ================================================================================
# Performance Profiling and Debug Data
# ================================================================================

# Unity Profiler Data
*.data
*.raw
/ProfilerData/
# Performance profiling sessions
# Can be large and contain sensitive runtime data
# Useful for individual debugging but not for team sharing

# ================================================================================
# Version Control System Files
# ================================================================================
# Exclude other VCS metadata if switching systems

.svn/
.hg/
# Subversion and Mercurial metadata
# Prevents conflicts when migrating between VCS

# ================================================================================
# Operating System Generated Files
# ================================================================================
# Files created by different operating systems

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
# Windows Explorer thumbnails and folder settings

# macOS
.DS_Store
.AppleDouble
.LSOverride
# macOS Finder metadata and resource forks

# Linux
*~
# Temporary backup files created by various Linux editors

# ================================================================================
# Third-Party Tool Integration
# ================================================================================

# Gradle (Android Builds)
.gradle/
# Gradle build cache for Android projects
# Regenerated based on gradle configuration

# Firebase Crashlytics
crashlytics-build.properties
# Crashlytics build configuration
# May contain sensitive API keys

# ================================================================================
# Project-Specific Customizations
# ================================================================================
# Add your project-specific ignore patterns below this section

# Release Distribution Folder
/Web Release/
# Custom release packaging directory

# Example Project-Specific Patterns (uncomment and modify as needed):

# Custom Asset Processing
# /[Aa]ssets/StreamingAssets/CustomData/
# /[Aa]ssets/Resources/Generated/

# Third-Party Package Data
# /[Aa]ssets/UnityGoogleDrive/
# /[Aa]ssets/UnityGoogleDrive.meta

# Local Development Files
# *.local
# *.dev
# /LocalOnly/

# Large Media Files (if not using Git LFS)
# *.mov
# *.mp4
# *.wav
# *.psd

# API Keys and Secrets (CRITICAL - Always ignore sensitive data)
# **/ApiKeys.cs
# **/Secrets.json
# **/*password*
# **/*secret*
# **/*key*.txt

# ================================================================================
# Performance Notes for Large Projects:
# ================================================================================
# 1. If your team uses consistent casing, you can simplify patterns:
#    /Library/ instead of /[Ll]ibrary/ (reduces Git pattern matching overhead)
#
# 2. Place frequently changing patterns at the top of sections
#    (Git processes .gitignore sequentially)
#
# 3. Use specific paths rather than overly broad wildcards
#    (Improves Git performance and reduces false positives)
#
# 4. Regularly review and clean up unused patterns
#    (Keeps file maintainable and performant)
# ================================================================================